// Copyright 2025 xinchentechnote
// Code generated by fin-protoc. DO NOT EDIT.
#pragma once
#include <cstdint>
#include <memory>
#include <string>
#include <vector>
#include <iostream>
#include "include/codec.hpp"
#include "include/bytebuf.hpp"

struct StringPacket : public codec::BinaryCodec {
    std::string fieldDynamicString;
    std::string fieldDynamicString1;
    std::string fieldFixedString1;
    std::string fieldFixedString10;
    std::vector<std::string> fieldDynamicStringList;
    std::vector<std::string> fieldDynamicString1List;
    std::vector<std::string> fieldFixedString1List;
    std::vector<std::string> fieldFixedString10List;

    void encode(ByteBuf& buf) const override {}
    void decode(ByteBuf& buf) override {}
    std::string toString() const override {
        std::string result = "StringPacket { ";
        result += "fieldDynamicString: " + fieldDynamicString;
        result += ", ";
        result += "fieldDynamicString1: " + fieldDynamicString1;
        result += ", ";
        result += "fieldFixedString1: " + fieldFixedString1;
        result += ", ";
        result += "fieldFixedString10: " + fieldFixedString10;
        result += ", ";
        result += "fieldDynamicStringList: " + codec::join_vector(fieldDynamicStringList);
        result += ", ";
        result += "fieldDynamicString1List: " + codec::join_vector(fieldDynamicString1List);
        result += ", ";
        result += "fieldFixedString1List: " + codec::join_vector(fieldFixedString1List);
        result += ", ";
        result += "fieldFixedString10List: " + codec::join_vector(fieldFixedString10List);
        result += " }";
        return result;
    }
};

inline std::ostream& operator<<(std::ostream& os, const StringPacket& pkt) {
    return os << pkt.toString();
}


struct SubPacket : public codec::BinaryCodec {
    uint32_t fieldU32;
    std::vector<int16_t> fieldI16List;

    void encode(ByteBuf& buf) const override {}
    void decode(ByteBuf& buf) override {}
    std::string toString() const override {
        std::string result = "SubPacket { ";
        result += "fieldU32: " + std::to_string(fieldU32);
        result += ", ";
        result += "fieldI16List: " + codec::join_vector(fieldI16List);
        result += " }";
        return result;
    }
};

inline std::ostream& operator<<(std::ostream& os, const SubPacket& pkt) {
    return os << pkt.toString();
}



struct InerPacket : public codec::BinaryCodec {
    uint32_t fieldU32;
    std::vector<int16_t> fieldI16List;

    void encode(ByteBuf& buf) const override {}
    void decode(ByteBuf& buf) override {}
    std::string toString() const override {
        std::string result = "InerPacket { ";
        result += "fieldU32: " + std::to_string(fieldU32);
        result += ", ";
        result += "fieldI16List: " + codec::join_vector(fieldI16List);
        result += " }";
        return result;
    }
};

inline std::ostream& operator<<(std::ostream& os, const InerPacket& pkt) {
    return os << pkt.toString();
}


struct NestedPacket : public codec::BinaryCodec {
    SubPacket subPacket;
    std::vector<SubPacket> subPacketList;
    InerPacket inerPacket;

    void encode(ByteBuf& buf) const override {}
    void decode(ByteBuf& buf) override {}
    std::string toString() const override {
        std::string result = "NestedPacket { ";
        result += "SubPacket: " + subPacket.toString();
        result += ", ";
        result += "SubPacketList: " + codec::join_vector(subPacketList);
        result += ", ";
        result += "InerPacket: " + inerPacket.toString();
        result += " }";
        return result;
    }
};

inline std::ostream& operator<<(std::ostream& os, const NestedPacket& pkt) {
    return os << pkt.toString();
}



struct EmptyPacket : public codec::BinaryCodec {

    void encode(ByteBuf& buf) const override {}
    void decode(ByteBuf& buf) override {}
    std::string toString() const override {
        std::string result = "EmptyPacket { ";
        result += " }";
        return result;
    }
};

inline std::ostream& operator<<(std::ostream& os, const EmptyPacket& pkt) {
    return os << pkt.toString();
}


struct RootPacket : public codec::BinaryCodec {
    uint16_t msgType;
    uint32_t payloadLen;
    std::unique_ptr<codec::BinaryCodec> payload;
    int32_t checksum;

    void encode(ByteBuf& buf) const override {}
    void decode(ByteBuf& buf) override {}
    std::string toString() const override {
        std::string result = "RootPacket { ";
        result += "MsgType: " + std::to_string(msgType);
        result += ", ";
        result += "PayloadLen: " + std::to_string(payloadLen);
        result += ", ";
        result += "Payload: " + payload->toString();
        result += ", ";
        result += "Checksum: " + std::to_string(checksum);
        result += " }";
        return result;
    }
};

inline std::ostream& operator<<(std::ostream& os, const RootPacket& pkt) {
    return os << pkt.toString();
}


struct BasicPacket : public codec::BinaryCodec {
    int8_t fieldI8;
    int16_t fieldI16;
    int32_t fieldI32;
    int64_t fieldI64;
    std::string fieldChar;
    uint8_t fieldU8;
    uint16_t fieldU16;
    uint32_t fieldU32;
    uint64_t fieldU64;
    float fieldF32;
    double fieldF64;
    std::vector<int8_t> fieldI8List;
    std::vector<int16_t> fieldI16List;
    std::vector<int32_t> fieldI32List;
    std::vector<int64_t> fieldI64List;
    std::vector<std::string> fieldCharList;
    std::vector<uint8_t> fieldU8List;
    std::vector<uint16_t> fieldU16List;
    std::vector<uint32_t> fieldU32List;
    std::vector<uint64_t> fieldU64List;
    std::vector<float> fieldF32List;
    std::vector<double> fieldF64List;

    void encode(ByteBuf& buf) const override {}
    void decode(ByteBuf& buf) override {}
    std::string toString() const override {
        std::string result = "BasicPacket { ";
        result += "fieldI8: " + std::to_string(fieldI8);
        result += ", ";
        result += "fieldI16: " + std::to_string(fieldI16);
        result += ", ";
        result += "fieldI32: " + std::to_string(fieldI32);
        result += ", ";
        result += "fieldI64: " + std::to_string(fieldI64);
        result += ", ";
        result += "fieldChar: " + fieldChar;
        result += ", ";
        result += "fieldU8: " + std::to_string(fieldU8);
        result += ", ";
        result += "fieldU16: " + std::to_string(fieldU16);
        result += ", ";
        result += "fieldU32: " + std::to_string(fieldU32);
        result += ", ";
        result += "fieldU64: " + std::to_string(fieldU64);
        result += ", ";
        result += "fieldF32: " + std::to_string(fieldF32);
        result += ", ";
        result += "fieldF64: " + std::to_string(fieldF64);
        result += ", ";
        result += "fieldI8List: " + codec::join_vector(fieldI8List);
        result += ", ";
        result += "fieldI16List: " + codec::join_vector(fieldI16List);
        result += ", ";
        result += "fieldI32List: " + codec::join_vector(fieldI32List);
        result += ", ";
        result += "fieldI64List: " + codec::join_vector(fieldI64List);
        result += ", ";
        result += "fieldCharList: " + codec::join_vector(fieldCharList);
        result += ", ";
        result += "fieldU8List: " + codec::join_vector(fieldU8List);
        result += ", ";
        result += "fieldU16List: " + codec::join_vector(fieldU16List);
        result += ", ";
        result += "fieldU32List: " + codec::join_vector(fieldU32List);
        result += ", ";
        result += "fieldU64List: " + codec::join_vector(fieldU64List);
        result += ", ";
        result += "fieldF32List: " + codec::join_vector(fieldF32List);
        result += ", ";
        result += "fieldF64List: " + codec::join_vector(fieldF64List);
        result += " }";
        return result;
    }
};

inline std::ostream& operator<<(std::ostream& os, const BasicPacket& pkt) {
    return os << pkt.toString();
}


