// Copyright 2025 xinchentechnote
// Code generated by fin-protoc. DO NOT EDIT.
#pragma once
#include <cstdint>
#include <iostream>
#include <memory>
#include <string>
#include <vector>

#include "include/bytebuf.hpp"
#include "include/codec.hpp"

struct RootPacket : public codec::BinaryCodec {
  uint16_t msgType;
  uint32_t payloadLen;
  std::unique_ptr<codec::BinaryCodec> payload;
  int32_t checksum;

  void encode(ByteBuf& buf) const override {}
  void decode(ByteBuf& buf) override {}
  std::string toString() const override {
    std::string result = "RootPacket { ";
    result += "MsgType: " + std::to_string(msgType);
    result += ", ";
    result += "PayloadLen: " + std::to_string(payloadLen);
    result += ", ";
    result += "Payload: " + payload->toString();
    result += ", ";
    result += "Checksum: " + std::to_string(checksum);
    result += " }";
    return result;
  }
};

struct BasicPacket : public codec::BinaryCodec {
  int8_t fieldI8;
  int16_t fieldI16;
  int32_t fieldI32;
  int64_t fieldI64;
  std::string fieldChar;
  uint8_t fieldU8;
  uint16_t fieldU16;
  uint32_t fieldU32;
  uint64_t fieldU64;
  float fieldF32;
  double fieldF64;
  int8_t fieldI8List;
  int16_t fieldI16List;
  int32_t fieldI32List;
  int64_t fieldI64List;
  std::string fieldCharList;
  uint8_t fieldU8List;
  uint16_t fieldU16List;
  uint32_t fieldU32List;
  uint64_t fieldU64List;
  float fieldF32List;
  double fieldF64List;

  void encode(ByteBuf& buf) const override {}
  void decode(ByteBuf& buf) override {}
  std::string toString() const override {
    std::string result = "BasicPacket { ";
    result += "fieldI8: " + std::to_string(fieldI8);
    result += ", ";
    result += "fieldI16: " + std::to_string(fieldI16);
    result += ", ";
    result += "fieldI32: " + std::to_string(fieldI32);
    result += ", ";
    result += "fieldI64: " + std::to_string(fieldI64);
    result += ", ";
    result += "fieldChar: " + fieldChar;
    result += ", ";
    result += "fieldU8: " + std::to_string(fieldU8);
    result += ", ";
    result += "fieldU16: " + std::to_string(fieldU16);
    result += ", ";
    result += "fieldU32: " + std::to_string(fieldU32);
    result += ", ";
    result += "fieldU64: " + std::to_string(fieldU64);
    result += ", ";
    result += "fieldF32: " + std::to_string(fieldF32);
    result += ", ";
    result += "fieldF64: " + std::to_string(fieldF64);
    result += ", ";
    result += "fieldI8List: " + std::to_string(fieldI8List);
    result += ", ";
    result += "fieldI16List: " + std::to_string(fieldI16List);
    result += ", ";
    result += "fieldI32List: " + std::to_string(fieldI32List);
    result += ", ";
    result += "fieldI64List: " + std::to_string(fieldI64List);
    result += ", ";
    result += "fieldCharList: " + fieldCharList;
    result += ", ";
    result += "fieldU8List: " + std::to_string(fieldU8List);
    result += ", ";
    result += "fieldU16List: " + std::to_string(fieldU16List);
    result += ", ";
    result += "fieldU32List: " + std::to_string(fieldU32List);
    result += ", ";
    result += "fieldU64List: " + std::to_string(fieldU64List);
    result += ", ";
    result += "fieldF32List: " + std::to_string(fieldF32List);
    result += ", ";
    result += "fieldF64List: " + std::to_string(fieldF64List);
    result += " }";
    return result;
  }
};

struct StringPacket : public codec::BinaryCodec {
  std::string fieldDynamicString;
  std::string fieldDynamicString1;
  std::string fieldFixedString1;
  std::string fieldFixedString10;
  std::string fieldDynamicStringList;
  std::string fieldDynamicString1List;
  std::string fieldFixedString1List;
  std::string fieldFixedString10List;

  void encode(ByteBuf& buf) const override {}
  void decode(ByteBuf& buf) override {}
  std::string toString() const override {
    std::string result = "StringPacket { ";
    result += "fieldDynamicString: " + fieldDynamicString;
    result += ", ";
    result += "fieldDynamicString1: " + fieldDynamicString1;
    result += ", ";
    result += "fieldFixedString1: " + fieldFixedString1;
    result += ", ";
    result += "fieldFixedString10: " + fieldFixedString10;
    result += ", ";
    result += "fieldDynamicStringList: " + fieldDynamicStringList;
    result += ", ";
    result += "fieldDynamicString1List: " + fieldDynamicString1List;
    result += ", ";
    result += "fieldFixedString1List: " + fieldFixedString1List;
    result += ", ";
    result += "fieldFixedString10List: " + fieldFixedString10List;
    result += " }";
    return result;
  }
};

struct InerPacket : public codec::BinaryCodec {
  uint32_t fieldU32;
  int16_t fieldI16List;

  void encode(ByteBuf& buf) const override {}
  void decode(ByteBuf& buf) override {}
  std::string toString() const override {
    std::string result = "InerPacket { ";
    result += "fieldU32: " + std::to_string(fieldU32);
    result += ", ";
    result += "fieldI16List: " + std::to_string(fieldI16List);
    result += " }";
    return result;
  }
};

struct NestedPacket : public codec::BinaryCodec {
  SubPacket subPacket;
  SubPacket subPacketList;
  InerPacket inerPacket;

  void encode(ByteBuf& buf) const override {}
  void decode(ByteBuf& buf) override {}
  std::string toString() const override {
    std::string result = "NestedPacket { ";
    result += "SubPacket: " + subPacket.toString();
    result += ", ";
    result += "SubPacketList: " + subPacketList.toString();
    result += ", ";
    result += "InerPacket: " + inerPacket.toString();
    result += " }";
    return result;
  }
};

struct SubPacket : public codec::BinaryCodec {
  uint32_t fieldU32;
  int16_t fieldI16List;

  void encode(ByteBuf& buf) const override {}
  void decode(ByteBuf& buf) override {}
  std::string toString() const override {
    std::string result = "SubPacket { ";
    result += "fieldU32: " + std::to_string(fieldU32);
    result += ", ";
    result += "fieldI16List: " + std::to_string(fieldI16List);
    result += " }";
    return result;
  }
};

struct EmptyPacket : public codec::BinaryCodec {
  void encode(ByteBuf& buf) const override {}
  void decode(ByteBuf& buf) override {}
  std::string toString() const override {
    std::string result = "EmptyPacket { ";
    result += " }";
    return result;
  }
};
