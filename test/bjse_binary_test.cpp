// Copyright 2025 xinchentechnote
// Code generated by fin-protoc. DO NOT EDIT.
#include "include/bjse_binary.hpp"
#include <gtest/gtest.h>

TEST(LogonTest, EncodeAndDeocde) {
    Logon original;
    original.senderCompId = "xxxxxxxxxxxxxxxxxxxx";
    original.targetCompId = "xxxxxxxxxxxxxxxxxxxx";
    original.heartBtInt = 4;
    original.password = "xxxxxxxxxxxxxxxx";
    original.defaultApplVerId = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Logon decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(LogoutTest, EncodeAndDeocde) {
    Logout original;
    original.sessionStatus = 4;
    original.text = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Logout decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(HeartbeatTest, EncodeAndDeocde) {
    Heartbeat original;
    
    ByteBuf buf;
    original.encode(buf);
    Heartbeat decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(NewOrderTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<ExtendNewOrder010>();
    applExtend->stopPx = 8;
    applExtend->minQty = 8;
    applExtend->maxPriceLevels = 2;
    applExtend->timeInForce = "x";
    applExtend->cashMargin = "x";
    applExtend->settlType = "x";
    applExtend->settlPeriod = "x";
    
    NewOrder original;
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.branchId = "xx";
    original.orderRestrictions = "xxxx";
    original.side = "x";
    original.ordType = "x";
    original.orderQty = 8;
    original.price = 8;
    original.applId = "010";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    NewOrder decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExtendNewOrder010Test, EncodeAndDeocde) {
    ExtendNewOrder010 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.cashMargin = "x";
    original.settlType = "x";
    original.settlPeriod = "x";
    
    ByteBuf buf;
    original.encode(buf);
    ExtendNewOrder010 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExtendNewOrder041Test, EncodeAndDeocde) {
    ExtendNewOrder041 original;
    
    ByteBuf buf;
    original.encode(buf);
    ExtendNewOrder041 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExtendNewOrder042Test, EncodeAndDeocde) {
    ExtendNewOrder042 original;
    
    ByteBuf buf;
    original.encode(buf);
    ExtendNewOrder042 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExtendNewOrder043Test, EncodeAndDeocde) {
    ExtendNewOrder043 original;
    
    ByteBuf buf;
    original.encode(buf);
    ExtendNewOrder043 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExtendNewOrder044Test, EncodeAndDeocde) {
    ExtendNewOrder044 original;
    
    ByteBuf buf;
    original.encode(buf);
    ExtendNewOrder044 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExtendNewOrder045Test, EncodeAndDeocde) {
    ExtendNewOrder045 original;
    
    ByteBuf buf;
    original.encode(buf);
    ExtendNewOrder045 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExtendNewOrder040Test, EncodeAndDeocde) {
    ExtendNewOrder040 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    ExtendNewOrder040 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExtendNewOrder050Test, EncodeAndDeocde) {
    ExtendNewOrder050 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    ExtendNewOrder050 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(OrderCancelRequestTest, EncodeAndDeocde) {
    OrderCancelRequest original;
    original.applId = "xxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.origClOrdId = "xxxxxxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.branchId = "xx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    original.orderQty = 8;
    
    ByteBuf buf;
    original.encode(buf);
    OrderCancelRequest decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(CancelRejectTest, EncodeAndDeocde) {
    CancelReject original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.applId = "xxx";
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.origClOrdId = "xxxxxxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.branchId = "xx";
    original.ordStatus = "x";
    original.cxlRejReason = 2;
    original.rejectText = "xxxxxxxxxxxxxxxx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    CancelReject decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExecutionConfirmTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<ConfirmExtend010>();
    applExtend->stopPx = 8;
    applExtend->minQty = 8;
    applExtend->maxPriceLevels = 2;
    applExtend->timeInForce = "x";
    applExtend->cashMargin = "x";
    
    ExecutionConfirm original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.origClOrdId = "xxxxxxxxxx";
    original.execId = "xxxxxxxxxxxxxxxx";
    original.execType = "x";
    original.ordStatus = "x";
    original.ordRejReason = 2;
    original.leavesQty = 8;
    original.cumQty = 8;
    original.side = "x";
    original.ordType = "x";
    original.orderQty = 8;
    original.price = 8;
    original.accountId = "xxxxxxxxxx";
    original.branchId = "xx";
    original.orderRestrictions = "xxxx";
    original.applId = "010";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    ExecutionConfirm decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ConfirmExtend010Test, EncodeAndDeocde) {
    ConfirmExtend010 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    ConfirmExtend010 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ConfirmExtend041Test, EncodeAndDeocde) {
    ConfirmExtend041 original;
    
    ByteBuf buf;
    original.encode(buf);
    ConfirmExtend041 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ConfirmExtend042Test, EncodeAndDeocde) {
    ConfirmExtend042 original;
    
    ByteBuf buf;
    original.encode(buf);
    ConfirmExtend042 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ConfirmExtend043Test, EncodeAndDeocde) {
    ConfirmExtend043 original;
    
    ByteBuf buf;
    original.encode(buf);
    ConfirmExtend043 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ConfirmExtend044Test, EncodeAndDeocde) {
    ConfirmExtend044 original;
    
    ByteBuf buf;
    original.encode(buf);
    ConfirmExtend044 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ConfirmExtend045Test, EncodeAndDeocde) {
    ConfirmExtend045 original;
    
    ByteBuf buf;
    original.encode(buf);
    ConfirmExtend045 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ConfirmExtend040Test, EncodeAndDeocde) {
    ConfirmExtend040 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    ConfirmExtend040 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ConfirmExtend050Test, EncodeAndDeocde) {
    ConfirmExtend050 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    ConfirmExtend050 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExecutionReportTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<ReportExtend010>();
    applExtend->cashMargin = "x";
    applExtend->settlType = "x";
    applExtend->settlPeriod = "x";
    
    ExecutionReport original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.execId = "xxxxxxxxxxxxxxxx";
    original.execType = "x";
    original.ordStatus = "x";
    original.lastPx = 8;
    original.lastQty = 8;
    original.leavesQty = 8;
    original.cumQty = 8;
    original.side = "x";
    original.accountId = "xxxxxxxxxx";
    original.branchId = "xx";
    original.applId = "010";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    ExecutionReport decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ReportExtend010Test, EncodeAndDeocde) {
    ReportExtend010 original;
    original.cashMargin = "x";
    original.settlType = "x";
    original.settlPeriod = "x";
    
    ByteBuf buf;
    original.encode(buf);
    ReportExtend010 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ReportExtend040Test, EncodeAndDeocde) {
    ReportExtend040 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    ReportExtend040 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ReportExtend050Test, EncodeAndDeocde) {
    ReportExtend050 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.maturityDate = 4;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    ReportExtend050 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(QuoteTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<QuoteExtend070>();
    applExtend->branchId = "xx";
    applExtend->quoteId = "xxxxxxxxxx";
    applExtend->quoteRespId = "xxxxxxxxxx";
    applExtend->privateQuote = 1;
    applExtend->validUntilTime = 8;
    applExtend->priceType = 1;
    applExtend->cashMargin = "x";
    applExtend->counterPartyPbuid = "xxxxxx";
    applExtend->memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    Quote original;
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.quoteMsgId = "xxxxxxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.quoteReqId = "xxxxxxxxxx";
    original.quoteType = 1;
    original.bidPx = 8;
    original.offerPx = 8;
    original.bidSize = 8;
    original.offerSize = 8;
    original.applId = "070";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    Quote decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(QuoteExtend070Test, EncodeAndDeocde) {
    QuoteExtend070 original;
    original.branchId = "xx";
    original.quoteId = "xxxxxxxxxx";
    original.quoteRespId = "xxxxxxxxxx";
    original.privateQuote = 1;
    original.validUntilTime = 8;
    original.priceType = 1;
    original.cashMargin = "x";
    original.counterPartyPbuid = "xxxxxx";
    original.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    QuoteExtend070 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(QuoteExtend071Test, EncodeAndDeocde) {
    QuoteExtend071 original;
    
    ByteBuf buf;
    original.encode(buf);
    QuoteExtend071 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(QuoteStatusReportTest, EncodeAndDeocde) {
    Quote1 quote1;
    quote1.quoteId = "xxxxxxxxxx";
    quote1.quotePrice = 8;
    quote1.quoteQty = 8;
    
    auto applExtend = std::make_unique<QuoteStatusReportExtend070>();
    applExtend->branchId = "xx";
    applExtend->orderId = "xxxxxxxxxxxxxxxx";
    applExtend->execId = "xxxxxxxxxxxxxxxx";
    applExtend->quoteRespId = "xxxxxxxxxx";
    applExtend->privateQuote = 1;
    applExtend->side = "x";
    applExtend->priceType = 1;
    applExtend->validUntilTime = 8;
    applExtend->cashMargin = "x";
    applExtend->counterPartyPbuid = "xxxxxx";
    applExtend->memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    applExtend->quote1 = {quote1};
    
    QuoteStatusReport original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.quoteMsgId = "xxxxxxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.quoteReqId = "xxxxxxxxxx";
    original.quoteRjectReason = 8;
    original.quoteType = 1;
    original.bidPx = 8;
    original.offerPx = 8;
    original.bidSize = 8;
    original.offerSize = 8;
    original.applId = "070";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    QuoteStatusReport decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(QuoteStatusReportExtend070Test, EncodeAndDeocde) {
    Quote1 quote1;
    quote1.quoteId = "xxxxxxxxxx";
    quote1.quotePrice = 8;
    quote1.quoteQty = 8;
    
    QuoteStatusReportExtend070 original;
    original.branchId = "xx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    original.execId = "xxxxxxxxxxxxxxxx";
    original.quoteRespId = "xxxxxxxxxx";
    original.privateQuote = 1;
    original.side = "x";
    original.priceType = 1;
    original.validUntilTime = 8;
    original.cashMargin = "x";
    original.counterPartyPbuid = "xxxxxx";
    original.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.quote1 = {quote1};
    
    ByteBuf buf;
    original.encode(buf);
    QuoteStatusReportExtend070 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(QuoteResponseTest, EncodeAndDeocde) {
    Quote2 quote2;
    quote2.quoteId = "xxxxxxxxxx";
    quote2.quotePrice = 8;
    quote2.quoteQty = 8;
    
    auto applExtend = std::make_unique<QuoteResponseExtend070>();
    applExtend->cashMargin = "x";
    
    QuoteResponse original;
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.branchId = "xx";
    original.quoteRespId = "xxxxxxxxxx";
    original.quoteRespType = 1;
    original.side = "x";
    original.validUntilTime = 8;
    original.quoteType = 1;
    original.priceType = 1;
    original.quote2 = {quote2};
    original.applId = "070";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    QuoteResponse decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(QuoteResponseExtend070Test, EncodeAndDeocde) {
    QuoteResponseExtend070 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    QuoteResponseExtend070 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(AllegeQuoteTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<AllegeQuoteExtend070>();
    applExtend->cashMargin = "x";
    applExtend->counterPartyPbuid = "xxxxxx";
    
    AllegeQuote original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    original.execId = "xxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.quoteReqId = "xxxxxxxxxx";
    original.quoteId = "xxxxxxxxxx";
    original.quoteRespId = "xxxxxxxxxx";
    original.quoteType = 1;
    original.bidPx = 8;
    original.offerPx = 8;
    original.bidSize = 8;
    original.offerSize = 8;
    original.privateQuote = 1;
    original.validUntilTime = 8;
    original.priceType = 1;
    original.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.applId = "070";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    AllegeQuote decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(AllegeQuoteExtend070Test, EncodeAndDeocde) {
    AllegeQuoteExtend070 original;
    original.cashMargin = "x";
    original.counterPartyPbuid = "xxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    AllegeQuoteExtend070 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(AllegeQuoteResponseTest, EncodeAndDeocde) {
    AllegeQuoteResponse original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.applId = "xxx";
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    original.execId = "xxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.quoteId = "xxxxxxxxxx";
    original.quoteRespId = "xxxxxxxxxx";
    original.quoteRespType = 1;
    original.privateQuote = 1;
    original.orderQty = 8;
    original.price = 8;
    original.validUntilTime = 8;
    original.quoteType = 1;
    original.priceType = 1;
    
    ByteBuf buf;
    original.encode(buf);
    AllegeQuoteResponse decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<TradeCaptureReportExtend031>();
    applExtend->memberId = "xxxxxx";
    applExtend->traderCode = "xxxxx";
    applExtend->counterPartyMemberId = "xxxxxx";
    applExtend->counterPartyTraderCode = "xxxxx";
    applExtend->settlType = "x";
    applExtend->settlPeriod = "x";
    applExtend->cashMargin = "x";
    applExtend->memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    TradeCaptureReport original;
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.tradeReportId = "xxxxxxxxxx";
    original.tradeReportType = 1;
    original.tradeReportTransType = 1;
    original.tradeHandlingInstr = "x";
    original.tradeReportRefId = "xxxxxxxxxx";
    original.lastPx = 8;
    original.lastQty = 8;
    original.trdType = 2;
    original.trdSubType = 2;
    original.confirmId = 4;
    original.side = "x";
    original.pbuid = "xxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.branchId = "xx";
    original.counterPartyPbuid = "xxxxxx";
    original.counterPartyAccountId = "xxxxxxxxxx";
    original.counterPartyBranchId = "xx";
    original.applId = "031";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReport decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportExtend031Test, EncodeAndDeocde) {
    TradeCaptureReportExtend031 original;
    original.memberId = "xxxxxx";
    original.traderCode = "xxxxx";
    original.counterPartyMemberId = "xxxxxx";
    original.counterPartyTraderCode = "xxxxx";
    original.settlType = "x";
    original.settlPeriod = "x";
    original.cashMargin = "x";
    original.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportExtend031 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportExtend051Test, EncodeAndDeocde) {
    TradeCaptureReportExtend051 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportExtend051 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportExtend060Test, EncodeAndDeocde) {
    TradeCaptureReportExtend060 original;
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportExtend060 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportExtend061Test, EncodeAndDeocde) {
    TradeCaptureReportExtend061 original;
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportExtend061 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportExtend062Test, EncodeAndDeocde) {
    TradeCaptureReportExtend062 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportExtend062 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportAckTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<TradeCaptureReportAckExtend031>();
    applExtend->memberId = "xxxxxx";
    applExtend->traderCode = "xxxxx";
    applExtend->counterPartyMemberId = "xxxxxx";
    applExtend->counterPartyTraderCode = "xxxxx";
    applExtend->settlType = "x";
    applExtend->settlPeriod = "x";
    applExtend->cashMargin = "x";
    applExtend->memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    TradeCaptureReportAck original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.tradeId = "xxxxxxxxxxxxxxxx";
    original.tradeReportId = "xxxxxxxxxx";
    original.tradeReportType = 1;
    original.tradeReportTransType = 1;
    original.tradeHandlingInstr = "x";
    original.tradeReportRefId = "xxxxxxxxxx";
    original.trdAckStatus = 1;
    original.trdRptStatus = 1;
    original.tradeReportRejectReason = 2;
    original.lastPx = 8;
    original.lastQty = 8;
    original.trdType = 2;
    original.trdSubType = 2;
    original.confirmId = 4;
    original.execId = "xxxxxxxxxxxxxxxx";
    original.side = "x";
    original.pbuid = "xxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.branchId = "xx";
    original.counterPartyPbuid = "xxxxxx";
    original.counterPartyAccountId = "xxxxxxxxxx";
    original.counterPartyBranchId = "xx";
    original.applId = "031";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportAck decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportAckExtend031Test, EncodeAndDeocde) {
    TradeCaptureReportAckExtend031 original;
    original.memberId = "xxxxxx";
    original.traderCode = "xxxxx";
    original.counterPartyMemberId = "xxxxxx";
    original.counterPartyTraderCode = "xxxxx";
    original.settlType = "x";
    original.settlPeriod = "x";
    original.cashMargin = "x";
    original.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportAckExtend031 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportAckExtend051Test, EncodeAndDeocde) {
    TradeCaptureReportAckExtend051 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportAckExtend051 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportAckExtend060Test, EncodeAndDeocde) {
    TradeCaptureReportAckExtend060 original;
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportAckExtend060 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportAckExtend061Test, EncodeAndDeocde) {
    TradeCaptureReportAckExtend061 original;
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportAckExtend061 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureReportAckExtend062Test, EncodeAndDeocde) {
    TradeCaptureReportAckExtend062 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureReportAckExtend062 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureConfirmTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<TradeCaptureConfirmExtend031>();
    applExtend->memberId = "xxxxxx";
    applExtend->traderCode = "xxxxx";
    applExtend->counterPartyMemberId = "xxxxxx";
    applExtend->counterPartyTraderCode = "xxxxx";
    applExtend->settlType = "x";
    applExtend->settlPeriod = "x";
    applExtend->cashMargin = "x";
    applExtend->memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    TradeCaptureConfirm original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.tradeId = "xxxxxxxxxxxxxxxx";
    original.tradeReportId = "xxxxxxxxxx";
    original.tradeReportType = 1;
    original.tradeReportTransType = 1;
    original.tradeHandlingInstr = "x";
    original.lastPx = 8;
    original.lastQty = 8;
    original.trdType = 2;
    original.trdSubType = 2;
    original.confirmId = 4;
    original.execId = "xxxxxxxxxxxxxxxx";
    original.side = "x";
    original.pbuid = "xxxxxx";
    original.accountId = "xxxxxxxxxx";
    original.branchId = "xx";
    original.counterPartyPbuid = "xxxxxx";
    original.counterPartyAccountId = "xxxxxxxxxx";
    original.counterPartyBranchId = "xx";
    original.applId = "031";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureConfirm decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureConfirmExtend031Test, EncodeAndDeocde) {
    TradeCaptureConfirmExtend031 original;
    original.memberId = "xxxxxx";
    original.traderCode = "xxxxx";
    original.counterPartyMemberId = "xxxxxx";
    original.counterPartyTraderCode = "xxxxx";
    original.settlType = "x";
    original.settlPeriod = "x";
    original.cashMargin = "x";
    original.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureConfirmExtend031 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureConfirmExtend051Test, EncodeAndDeocde) {
    TradeCaptureConfirmExtend051 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.maturityDate = 4;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureConfirmExtend051 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureConfirmExtend060Test, EncodeAndDeocde) {
    TradeCaptureConfirmExtend060 original;
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureConfirmExtend060 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureConfirmExtend061Test, EncodeAndDeocde) {
    TradeCaptureConfirmExtend061 original;
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureConfirmExtend061 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradeCaptureConfirmExtend062Test, EncodeAndDeocde) {
    TradeCaptureConfirmExtend062 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    TradeCaptureConfirmExtend062 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(BusinessRejectTest, EncodeAndDeocde) {
    BusinessReject original;
    original.applId = "xxx";
    original.transactTime = 8;
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.refSeqNum = 8;
    original.refMsgType = 4;
    original.businessRejectRefId = "xxxxxxxxxx";
    original.businessRejectReason = 2;
    original.businessRejectText = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    BusinessReject decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ReportSynchronizationTest, EncodeAndDeocde) {
    ReportPartitionSync reportPartitionSync;
    reportPartitionSync.partitionNo = 4;
    reportPartitionSync.reportIndex = 8;
    
    ReportSynchronization original;
    original.reportPartitionSync = {reportPartitionSync};
    
    ByteBuf buf;
    original.encode(buf);
    ReportSynchronization decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradingSessionStatusTest, EncodeAndDeocde) {
    TradingSessionStatus original;
    original.marketId = "xxx";
    original.marketSegmentId = "xxx";
    original.tradingSessionId = "xxx";
    original.tradingSessionSubId = "xxx";
    original.tradSesStatus = 1;
    original.tradSesStartTime = 8;
    
    ByteBuf buf;
    original.encode(buf);
    TradingSessionStatus decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(PlatformStateInfoTest, EncodeAndDeocde) {
    PlatformStateInfo original;
    original.platformId = 2;
    original.platformState = 2;
    
    ByteBuf buf;
    original.encode(buf);
    PlatformStateInfo decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ReportFinishedTest, EncodeAndDeocde) {
    ReportFinished original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.platformId = 2;
    
    ByteBuf buf;
    original.encode(buf);
    ReportFinished decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(PlatformInfoTest, EncodeAndDeocde) {
    NoPartitions noPartitions;
    noPartitions.partitionNo = 4;
    noPartitions.partitionName = "xxxxxxxxxxxxxxxxxxxx";
    
    PlatformInfo original;
    original.platformId = 2;
    original.noPartitions = {noPartitions};
    
    ByteBuf buf;
    original.encode(buf);
    PlatformInfo decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(BjseBinaryTest, EncodeAndDeocde) {
    auto body = std::make_unique<Logon>();
    body->senderCompId = "xxxxxxxxxxxxxxxxxxxx";
    body->targetCompId = "xxxxxxxxxxxxxxxxxxxx";
    body->heartBtInt = 4;
    body->password = "xxxxxxxxxxxxxxxx";
    body->defaultApplVerId = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    BjseBinary original;
    original.bodyLength = 4;
    original.msgType = 1;
    original.body = std::move(body);
    original.checksum = 4;
    
    ByteBuf buf;
    original.encode(buf);
    BjseBinary decoded;
    decoded.decode(buf);
    original.bodyLength = decoded.bodyLength;

    EXPECT_TRUE(original == decoded);
}

