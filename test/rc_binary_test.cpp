// Copyright 2025 xinchentechnote
// Code generated by fin-protoc. DO NOT EDIT.
#include "include/rc_binary.hpp"
#include <gtest/gtest.h>

TEST(RcBinaryTest, EncodeAndDeocde) {
    auto body = std::make_unique<NewOrder>();
    body->clOrdId = "hello";
    body->securityId = "hello";
    body->side = "x";
    body->price = 8;
    body->orderQty = 8;
    body->ordType = "x";
    body->account = "hello";
    
    RcBinary original;
    original.version = 4;
    original.msgBodyLen = 4;
    original.msgType = 100101;
    original.body = std::move(body);
    
    ByteBuf buf;
    original.encode(buf);
    RcBinary decoded;
    decoded.decode(buf);
    original.msgBodyLen = decoded.msgBodyLen;
    EXPECT_TRUE(original == decoded);
}

TEST(NewOrderTest, EncodeAndDeocde) {
    NewOrder original;
    original.clOrdId = "hello";
    original.securityId = "hello";
    original.side = "x";
    original.price = 8;
    original.orderQty = 8;
    original.ordType = "x";
    original.account = "hello";
    
    ByteBuf buf;
    original.encode(buf);
    NewOrder decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(OrderConfirmTest, EncodeAndDeocde) {
    OrderConfirm original;
    original.clOrdId = "hello";
    original.execType = "x";
    original.ordRejReason = 4;
    original.ordCnfmId = "hello";
    
    ByteBuf buf;
    original.encode(buf);
    OrderConfirm decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExecutionReportTest, EncodeAndDeocde) {
    ExecutionReport original;
    original.clOrdId = "hello";
    original.ordCnfmId = "hello";
    original.lastPx = 8;
    original.lastQty = 8;
    original.ordStatus = "x";
    
    ByteBuf buf;
    original.encode(buf);
    ExecutionReport decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(OrderCancelTest, EncodeAndDeocde) {
    OrderCancel original;
    original.clOrdId = "hello";
    original.origClOrdId = "hello";
    original.securityId = "hello";
    
    ByteBuf buf;
    original.encode(buf);
    OrderCancel decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(CancelRejectTest, EncodeAndDeocde) {
    CancelReject original;
    original.clOrdId = "hello";
    original.origClOrdId = "hello";
    original.cxlRejReason = 4;
    
    ByteBuf buf;
    original.encode(buf);
    CancelReject decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

