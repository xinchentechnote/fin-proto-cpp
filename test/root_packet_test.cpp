// Copyright 2025 xinchentechnote
// Code generated by fin-protoc. DO NOT EDIT.
#include "include/root_packet.hpp"
#include <gtest/gtest.h>

TEST(RootPacketTest, EncodeAndDeocde) {
    auto payload = std::make_unique<BasicPacket>();
    payload->fieldI8 = 1;
    payload->fieldI16 = 2;
    payload->fieldI32 = 4;
    payload->fieldI64 = 8;
    payload->fieldChar = "x";
    payload->fieldU8 = 1;
    payload->fieldU16 = 2;
    payload->fieldU32 = 4;
    payload->fieldU64 = 8;
    payload->fieldF32 = 4;
    payload->fieldF64 = 8;
    payload->fieldI8List = {1};
    payload->fieldI16List = {2};
    payload->fieldI32List = {4};
    payload->fieldI64List = {8};
    payload->fieldCharList = {"x"};
    payload->fieldU8List = {1};
    payload->fieldU16List = {2};
    payload->fieldU32List = {4};
    payload->fieldU64List = {8};
    payload->fieldF32List = {4};
    payload->fieldF64List = {8};
    
    RootPacket original;
    original.payloadLen = 4;
    original.msgType = 1;
    original.payload = std::move(payload);
    original.checksum = 4;
    
    ByteBuf buf;
    original.encode(buf);
    RootPacket decoded;
    decoded.decode(buf);
    original.payloadLen = decoded.payloadLen;
    EXPECT_TRUE(original == decoded);
}

TEST(BasicPacketTest, EncodeAndDeocde) {
    BasicPacket original;
    original.fieldI8 = 1;
    original.fieldI16 = 2;
    original.fieldI32 = 4;
    original.fieldI64 = 8;
    original.fieldChar = "x";
    original.fieldU8 = 1;
    original.fieldU16 = 2;
    original.fieldU32 = 4;
    original.fieldU64 = 8;
    original.fieldF32 = 4;
    original.fieldF64 = 8;
    original.fieldI8List = {1};
    original.fieldI16List = {2};
    original.fieldI32List = {4};
    original.fieldI64List = {8};
    original.fieldCharList = {"x"};
    original.fieldU8List = {1};
    original.fieldU16List = {2};
    original.fieldU32List = {4};
    original.fieldU64List = {8};
    original.fieldF32List = {4};
    original.fieldF64List = {8};
    
    ByteBuf buf;
    original.encode(buf);
    BasicPacket decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(StringPacketTest, EncodeAndDeocde) {
    StringPacket original;
    original.fieldDynamicString = "hello";
    original.fieldDynamicString1 = "hello";
    original.fieldFixedString1 = "x";
    original.fieldFixedString10 = "xxxxxxxxxx";
    original.fieldDynamicStringList = {"hello"};
    original.fieldDynamicString1List = {"hello"};
    original.fieldFixedString1List = {"x"};
    original.fieldFixedString10List = {"xxxxxxxxxx"};
    
    ByteBuf buf;
    original.encode(buf);
    StringPacket decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(NestedPacketTest, EncodeAndDeocde) {
    SubPacket subPacket;
    subPacket.fieldU32 = 4;
    subPacket.fieldI16List = {2};
    
    SubPacket subPacketList;
    subPacketList.fieldU32 = 4;
    subPacketList.fieldI16List = {2};
    
    InerPacket inerPacket;
    inerPacket.fieldU32 = 4;
    inerPacket.fieldI16List = {2};
    
    NestedPacket original;
    original.subPacket = subPacket;
    original.subPacketList = {subPacketList};
    original.inerPacket = inerPacket;
    
    ByteBuf buf;
    original.encode(buf);
    NestedPacket decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(SubPacketTest, EncodeAndDeocde) {
    SubPacket original;
    original.fieldU32 = 4;
    original.fieldI16List = {2};
    
    ByteBuf buf;
    original.encode(buf);
    SubPacket decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(EmptyPacketTest, EncodeAndDeocde) {
    EmptyPacket original;
    
    ByteBuf buf;
    original.encode(buf);
    EmptyPacket decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

