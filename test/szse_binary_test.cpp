// Copyright 2025 xinchentechnote
// Code generated by fin-protoc. DO NOT EDIT.
#include "include/szse_binary.hpp"
#include <gtest/gtest.h>

TEST(SzseBinaryTest, EncodeAndDeocde) {
    auto body = std::make_unique<Logon>();
    body->senderCompId = "xxxxxxxxxxxxxxxxxxxx";
    body->targetCompId = "xxxxxxxxxxxxxxxxxxxx";
    body->heartBtint = 4;
    body->password = "xxxxxxxxxxxxxxxx";
    body->defaultApplVerId = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    SzseBinary original;
    original.bodyLength = 4;
    original.msgType = 1;
    original.body = std::move(body);
    original.checksum = 4;
    
    ByteBuf buf;
    original.encode(buf);
    SzseBinary decoded;
    decoded.decode(buf);
    original.bodyLength = decoded.bodyLength;
    EXPECT_TRUE(original == decoded);
}

TEST(LogonTest, EncodeAndDeocde) {
    Logon original;
    original.senderCompId = "xxxxxxxxxxxxxxxxxxxx";
    original.targetCompId = "xxxxxxxxxxxxxxxxxxxx";
    original.heartBtint = 4;
    original.password = "xxxxxxxxxxxxxxxx";
    original.defaultApplVerId = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Logon decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(LogoutTest, EncodeAndDeocde) {
    Logout original;
    original.sessionStatus = 4;
    original.text = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Logout decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(HeartbeatTest, EncodeAndDeocde) {
    Heartbeat original;
    
    ByteBuf buf;
    original.encode(buf);
    Heartbeat decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(NewOrderTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<Extend100101>();
    applExtend->stopPx = 8;
    applExtend->minQty = 8;
    applExtend->maxPriceLevels = 2;
    applExtend->timeInForce = "x";
    applExtend->cashMargin = "x";
    
    NewOrder original;
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.accountId = "xxxxxxxxxxxx";
    original.branchId = "xxxx";
    original.orderRestrictions = "xxxx";
    original.side = "x";
    original.ordType = "x";
    original.orderQty = 8;
    original.price = 8;
    original.applId = "010";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    NewOrder decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend100101Test, EncodeAndDeocde) {
    Extend100101 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend100101 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend100201Test, EncodeAndDeocde) {
    Extend100201 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend100201 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend100301Test, EncodeAndDeocde) {
    Extend100301 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend100301 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend101401Test, EncodeAndDeocde) {
    Extend101401 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.positionEffect = "x";
    original.coveredOrUncovered = 1;
    original.contractAccountCode = "xxxxxx";
    original.secondaryOrderId = "xxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend101401 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend100501Test, EncodeAndDeocde) {
    Extend100501 original;
    original.confirmId = "xxxxxxxx";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend100501 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend100601Test, EncodeAndDeocde) {
    Extend100601 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend100601 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend100701Test, EncodeAndDeocde) {
    Extend100701 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend100701 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend101501Test, EncodeAndDeocde) {
    Extend101501 original;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend101501 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend101601Test, EncodeAndDeocde) {
    Extend101601 original;
    original.contractAccountCode = "xxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend101601 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend101701Test, EncodeAndDeocde) {
    Extend101701 original;
    original.cashOrderQty = 8;
    
    ByteBuf buf;
    original.encode(buf);
    Extend101701 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend101801Test, EncodeAndDeocde) {
    Extend101801 original;
    original.tenderer = "xxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend101801 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend102701Test, EncodeAndDeocde) {
    Extend102701 original;
    original.disposalPbu = "xxxxxx";
    original.disposalAccountId = "xxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend102701 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend102801Test, EncodeAndDeocde) {
    Extend102801 original;
    original.lenderPbu = "xxxxxx";
    original.lenderAccountId = "xxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend102801 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend102901Test, EncodeAndDeocde) {
    Extend102901 original;
    original.deductionPbu = "xxxxxx";
    original.deductionAccountId = "xxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend102901 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend106301Test, EncodeAndDeocde) {
    Extend106301 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.lotType = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend106301 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend103501Test, EncodeAndDeocde) {
    Extend103501 original;
    original.contractAccountCode = "xxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend103501 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend103701Test, EncodeAndDeocde) {
    Extend103701 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend103701 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend104101Test, EncodeAndDeocde) {
    Extend104101 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend104101 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend104128Test, EncodeAndDeocde) {
    Extend104128 original;
    original.memberId = "xxxxxx";
    original.investorType = "xx";
    original.investorId = "xxxxxxxxxx";
    original.investorName = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.traderCode = "xxxxxxxx";
    original.secondaryOrderId = "xxxxxxxxxxxxxxxx";
    original.bidTransType = 2;
    original.bidExecInstType = 2;
    original.lowLimitPrice = 8;
    original.highLimitPrice = 8;
    original.minQty = 8;
    original.tradeDate = 4;
    original.settlType = 2;
    original.settlPeriod = 1;
    original.preTradeAnonymity = 1;
    original.cashMargin = "x";
    original.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend104128 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend104701Test, EncodeAndDeocde) {
    Extend104701 original;
    original.secondaryOrderId = "xxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend104701 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExecutionConfirmTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<Extend200102>();
    applExtend->stopPx = 8;
    applExtend->minQty = 8;
    applExtend->maxPriceLevels = 2;
    applExtend->timeInForce = "x";
    applExtend->cashMargin = "x";
    
    ExecutionConfirm original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.quoteMsgId = "xxxxxxxxxx";
    original.origClOrdId = "xxxxxxxxxx";
    original.execId = "xxxxxxxxxxxxxxxx";
    original.execType = "x";
    original.ordStatus = "x";
    original.ordRejReason = 2;
    original.leavesQty = 8;
    original.cumQty = 8;
    original.side = "x";
    original.ordType = "x";
    original.orderQty = 8;
    original.price = 8;
    original.accountId = "xxxxxxxxxxxx";
    original.branchId = "xxxx";
    original.orderRestrictions = "xxxx";
    original.applId = "010";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    ExecutionConfirm decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200102Test, EncodeAndDeocde) {
    Extend200102 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200102 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200202Test, EncodeAndDeocde) {
    Extend200202 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200202 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200302Test, EncodeAndDeocde) {
    Extend200302 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200302 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200402Test, EncodeAndDeocde) {
    Extend200402 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.positionEffect = "x";
    original.coveredOrUncovered = 1;
    original.contractAccountCode = "xxxxxx";
    original.secondaryOrderId = "xxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200402 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200502Test, EncodeAndDeocde) {
    Extend200502 original;
    original.confirmId = "xxxxxxxx";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200502 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200602Test, EncodeAndDeocde) {
    Extend200602 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200602 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200702Test, EncodeAndDeocde) {
    Extend200702 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200702 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend201202Test, EncodeAndDeocde) {
    Extend201202 original;
    original.insufficientSecurityId = "xxxxxxxx";
    original.noSecurity = 4;
    original.underlyingSecurityId = "xxxxxxxx";
    original.underlyingSecurityIdsource = "xxxx";
    original.deliveryQty = 8;
    original.substCash = 8;
    
    ByteBuf buf;
    original.encode(buf);
    Extend201202 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend201502Test, EncodeAndDeocde) {
    Extend201502 original;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend201502 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend201602Test, EncodeAndDeocde) {
    Extend201602 original;
    original.contractAccountCode = "xxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend201602 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend201702Test, EncodeAndDeocde) {
    Extend201702 original;
    original.cashOrderQty = 8;
    
    ByteBuf buf;
    original.encode(buf);
    Extend201702 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend201802Test, EncodeAndDeocde) {
    Extend201802 original;
    original.tenderer = "xxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend201802 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend202702Test, EncodeAndDeocde) {
    Extend202702 original;
    original.disposalPbu = "xxxxxx";
    original.disposalAccountId = "xxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend202702 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend202802Test, EncodeAndDeocde) {
    Extend202802 original;
    original.lenderPbu = "xxxxxx";
    original.lenderAccountId = "xxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend202802 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend202902Test, EncodeAndDeocde) {
    Extend202902 original;
    original.deductionPbu = "xxxxxx";
    original.deductionAccountId = "xxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend202902 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend203102Test, EncodeAndDeocde) {
    Extend203102 original;
    original.insufficientSecurityId = "xxxxxxxx";
    original.noSecurity = 4;
    original.underlyingSecurityId = "xxxxxxxx";
    original.underlyingSecurityIdsource = "xxxx";
    original.deliveryQty = 8;
    
    ByteBuf buf;
    original.encode(buf);
    Extend203102 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend206302Test, EncodeAndDeocde) {
    Extend206302 original;
    original.rejectText = "xxxxxxxxxxxxxxxx";
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.lotType = "x";
    original.imcrejectTextLen = 4;
    original.imcrejectText = "hello";
    
    ByteBuf buf;
    original.encode(buf);
    Extend206302 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend203502Test, EncodeAndDeocde) {
    Extend203502 original;
    original.contractAccountCode = "xxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend203502 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend203702Test, EncodeAndDeocde) {
    Extend203702 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend203702 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend204102Test, EncodeAndDeocde) {
    Extend204102 original;
    original.stopPx = 8;
    original.minQty = 8;
    original.maxPriceLevels = 2;
    original.timeInForce = "x";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend204102 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend204129Test, EncodeAndDeocde) {
    Extend204129 original;
    original.memberId = "xxxxxx";
    original.investorType = "xx";
    original.investorId = "xxxxxxxxxx";
    original.investorName = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.traderCode = "xxxxxxxx";
    original.secondaryOrderId = "xxxxxxxxxxxxxxxx";
    original.bidTransType = 2;
    original.bidExecInstType = 2;
    original.lowLimitPrice = 8;
    original.highLimitPrice = 8;
    original.minQty = 8;
    original.tradeDate = 4;
    original.settlType = 2;
    original.settlPeriod = 1;
    original.preTradeAnonymity = 1;
    original.cashMargin = "x";
    original.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend204129 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend204702Test, EncodeAndDeocde) {
    Extend204702 original;
    original.secondaryOrderId = "xxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend204702 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExecutionReportTest, EncodeAndDeocde) {
    auto applExtend = std::make_unique<Extend200115>();
    applExtend->cashMargin = "x";
    
    ExecutionReport original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.quoteMsgId = "xxxxxxxxxx";
    original.execId = "xxxxxxxxxxxxxxxx";
    original.execType = "x";
    original.ordStatus = "x";
    original.lastPx = 8;
    original.lastQty = 8;
    original.leavesQty = 8;
    original.cumQty = 8;
    original.side = "x";
    original.accountId = "xxxxxxxxxxxx";
    original.branchId = "xxxx";
    original.applId = "010";
    original.applExtend = std::move(applExtend);
    
    ByteBuf buf;
    original.encode(buf);
    ExecutionReport decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200115Test, EncodeAndDeocde) {
    Extend200115 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200115 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200215Test, EncodeAndDeocde) {
    Extend200215 original;
    original.maturityDate = 4;
    
    ByteBuf buf;
    original.encode(buf);
    Extend200215 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200315Test, EncodeAndDeocde) {
    Extend200315 original;
    original.maturityDate = 4;
    
    ByteBuf buf;
    original.encode(buf);
    Extend200315 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200415Test, EncodeAndDeocde) {
    Extend200415 original;
    original.positionEffect = "x";
    original.coveredOrUncovered = 1;
    original.contractAccountCode = "xxxxxx";
    original.secondaryOrderId = "xxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200415 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200515Test, EncodeAndDeocde) {
    Extend200515 original;
    original.confirmId = "xxxxxxxx";
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200515 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200615Test, EncodeAndDeocde) {
    Extend200615 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200615 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend206315Test, EncodeAndDeocde) {
    Extend206315 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend206315 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend200715Test, EncodeAndDeocde) {
    Extend200715 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.maturityDate = 4;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend200715 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend204715Test, EncodeAndDeocde) {
    Extend204715 original;
    original.expirationDays = 2;
    original.expirationType = 1;
    original.maturityDate = 4;
    original.shareProperty = "xx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend204715 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend203715Test, EncodeAndDeocde) {
    Extend203715 original;
    original.cashMargin = "x";
    
    ByteBuf buf;
    original.encode(buf);
    Extend203715 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend204115Test, EncodeAndDeocde) {
    Extend204115 original;
    original.cashMargin = "x";
    original.settlType = 2;
    original.settlPeriod = 1;
    original.counterpartyMemberId = "xxxxxx";
    original.counterpartyInvestorType = "xx";
    original.counterpartyInvestorId = "xxxxxxxxxx";
    original.counterpartyInvestorName = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.counterpartyTraderCode = "xxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend204115 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(Extend204130Test, EncodeAndDeocde) {
    Extend204130 original;
    original.memberId = "xxxxxx";
    original.investorType = "xx";
    original.investorId = "xxxxxxxxxx";
    original.investorName = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.traderCode = "xxxxxxxx";
    original.counterpartyMemberId = "xxxxxx";
    original.counterpartyInvestorType = "xx";
    original.counterpartyInvestorId = "xxxxxxxxxx";
    original.counterpartyInvestorName = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.counterpartyTraderCode = "xxxxxxxx";
    original.secondaryOrderId = "xxxxxxxxxxxxxxxx";
    original.bidTransType = 2;
    original.bidExecInstType = 2;
    original.settlType = 2;
    original.settlPeriod = 1;
    original.cashMargin = "x";
    original.memo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Extend204130 decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(OrderCancelRequestTest, EncodeAndDeocde) {
    OrderCancelRequest original;
    original.applId = "xxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.origClOrdId = "xxxxxxxxxx";
    original.side = "x";
    original.orderId = "xxxxxxxxxxxxxxxx";
    original.orderQty = 8;
    
    ByteBuf buf;
    original.encode(buf);
    OrderCancelRequest decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(CancelRejectTest, EncodeAndDeocde) {
    CancelReject original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.applId = "xxx";
    original.reportingPbuid = "xxxxxx";
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.ownerType = 2;
    original.clearingFirm = "xx";
    original.transactTime = 8;
    original.userInfo = "xxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.origClOrdId = "xxxxxxxxxx";
    original.side = "x";
    original.ordStatus = "x";
    original.cxlRejReason = 2;
    original.rejectText = "xxxxxxxxxxxxxxxx";
    original.orderId = "xxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    CancelReject decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(BusinessRejectTest, EncodeAndDeocde) {
    BusinessReject original;
    original.applId = "xxx";
    original.transactTime = 8;
    original.submittingPbuid = "xxxxxx";
    original.securityId = "xxxxxxxx";
    original.securityIdsource = "xxxx";
    original.refSeqNum = 8;
    original.refMsgType = 4;
    original.businessRejectRefId = "xxxxxxxxxx";
    original.businessRejectReason = 2;
    original.businessRejectText = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    BusinessReject decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ReportSynchronizationTest, EncodeAndDeocde) {
    PartitionReport partitionReport;
    partitionReport.partitionNo = 4;
    partitionReport.reportIndex = 8;
    
    ReportSynchronization original;
    original.partitionReport = {partitionReport};
    
    ByteBuf buf;
    original.encode(buf);
    ReportSynchronization decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(PartitionReportTest, EncodeAndDeocde) {
    PartitionReport original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    
    ByteBuf buf;
    original.encode(buf);
    PartitionReport decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(PlatformStateInfoTest, EncodeAndDeocde) {
    PlatformStateInfo original;
    original.platformId = 2;
    original.platformState = 2;
    
    ByteBuf buf;
    original.encode(buf);
    PlatformStateInfo decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ReportFinishedTest, EncodeAndDeocde) {
    ReportFinished original;
    original.partitionNo = 4;
    original.reportIndex = 8;
    original.platformId = 2;
    
    ByteBuf buf;
    original.encode(buf);
    ReportFinished decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(PlatformInfoTest, EncodeAndDeocde) {
    PlatformPartition platformPartition;
    platformPartition.partitionNo = 4;
    
    PlatformInfo original;
    original.platformId = 2;
    original.platformPartition = {platformPartition};
    
    ByteBuf buf;
    original.encode(buf);
    PlatformInfo decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(PlatformPartitionTest, EncodeAndDeocde) {
    PlatformPartition original;
    original.partitionNo = 4;
    
    ByteBuf buf;
    original.encode(buf);
    PlatformPartition decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(TradingSessionStatusTest, EncodeAndDeocde) {
    TradingSessionStatus original;
    original.marketId = "xxxxxxxx";
    original.marketSegmentId = "xxxxxxxx";
    original.tradingSessionId = "xxxx";
    original.tradingSessionSubId = "xxxx";
    original.tradSesStatus = 2;
    original.tradSesStartTime = 8;
    original.tradSesEndTime = 8;
    
    ByteBuf buf;
    original.encode(buf);
    TradingSessionStatus decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

