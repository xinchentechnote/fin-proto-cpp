// Copyright 2025 xinchentechnote
// Code generated by fin-protoc. DO NOT EDIT.
#include "include/sse_binary.hpp"
#include <gtest/gtest.h>

TEST(SseBinaryTest, EncodeAndDeocde) {
    auto body = std::make_unique<Heartbeat>();
    
    SseBinary original;
    original.msgSeqNum = 8;
    original.msgBodyLen = 4;
    original.msgType = 33;
    original.body = std::move(body);
    original.checksum = 4;
    
    ByteBuf buf;
    original.encode(buf);
    SseBinary decoded;
    decoded.decode(buf);
    original.msgBodyLen = decoded.msgBodyLen;
    original.checksum = decoded.checksum;

    EXPECT_TRUE(original == decoded);
}

TEST(HeartbeatTest, EncodeAndDeocde) {
    Heartbeat original;
    
    ByteBuf buf;
    original.encode(buf);
    Heartbeat decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(LogonTest, EncodeAndDeocde) {
    Logon original;
    original.senderCompId = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.targetCompId = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    original.heartBtInt = 2;
    original.prtclVersion = "xxxxxxxx";
    original.tradeDate = 4;
    original.qsize = 4;
    
    ByteBuf buf;
    original.encode(buf);
    Logon decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(LogoutTest, EncodeAndDeocde) {
    Logout original;
    original.sessionStatus = 4;
    original.text = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Logout decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(NewOrderSingleTest, EncodeAndDeocde) {
    NewOrderSingle original;
    original.bizId = 4;
    original.bizPbu = "xxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.securityId = "xxxxxxxxxxxx";
    original.account = "xxxxxxxxxxxxx";
    original.ownerType = 1;
    original.side = "x";
    original.price = 8;
    original.orderQty = 8;
    original.ordType = "x";
    original.timeInForce = "x";
    original.transactTime = 8;
    original.creditTag = "xx";
    original.clearingFirm = "xxxxxxxx";
    original.branchId = "xxxxxxxx";
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    NewOrderSingle decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(OrderCancelTest, EncodeAndDeocde) {
    OrderCancel original;
    original.bizId = 4;
    original.bizPbu = "xxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.securityId = "xxxxxxxxxxxx";
    original.account = "xxxxxxxxxxxxx";
    original.ownerType = 1;
    original.side = "x";
    original.origClOrdId = "xxxxxxxxxx";
    original.transactTime = 8;
    original.branchId = "xxxxxxxx";
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    OrderCancel decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ConfirmTest, EncodeAndDeocde) {
    Confirm original;
    original.pbu = "xxxxxxxx";
    original.setId = 4;
    original.reportIndex = 8;
    original.bizId = 4;
    original.execType = "x";
    original.bizPbu = "xxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.securityId = "xxxxxxxxxxxx";
    original.account = "xxxxxxxxxxxxx";
    original.ownerType = 1;
    original.side = "x";
    original.price = 8;
    original.orderQty = 8;
    original.leavesQty = 8;
    original.cxlQty = 8;
    original.ordType = "x";
    original.timeInForce = "x";
    original.ordStatus = "x";
    original.creditTag = "xx";
    original.origClOrdId = "xxxxxxxxxx";
    original.clearingFirm = "xxxxxxxx";
    original.branchId = "xxxxxxxx";
    original.ordRejReason = 4;
    original.ordCnfmId = "xxxxxxxxxxxxxxxx";
    original.origOrdCnfmId = "xxxxxxxxxxxxxxxx";
    original.tradeDate = 4;
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Confirm decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(CancelRejectTest, EncodeAndDeocde) {
    CancelReject original;
    original.pbu = "xxxxxxxx";
    original.setId = 4;
    original.reportIndex = 8;
    original.bizId = 4;
    original.bizPbu = "xxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.securityId = "xxxxxxxxxxxx";
    original.origClOrdId = "xxxxxxxxxx";
    original.branchId = "xxxxxxxx";
    original.cxlRejReason = 4;
    original.tradeDate = 4;
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    CancelReject decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ReportTest, EncodeAndDeocde) {
    Report original;
    original.pbu = "xxxxxxxx";
    original.setId = 4;
    original.reportIndex = 8;
    original.bizId = 4;
    original.execType = "x";
    original.bizPbu = "xxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.securityId = "xxxxxxxxxxxx";
    original.account = "xxxxxxxxxxxxx";
    original.ownerType = 1;
    original.orderEntryTime = 8;
    original.lastPx = 8;
    original.lastQty = 8;
    original.grossTradeAmt = 8;
    original.side = "x";
    original.orderQty = 8;
    original.leavesQty = 8;
    original.ordStatus = "x";
    original.creditTag = "xx";
    original.clearingFirm = "xxxxxxxx";
    original.branchId = "xxxxxxxx";
    original.trdCnfmId = "xxxxxxxxxxxxxxxx";
    original.ordCnfmId = "xxxxxxxxxxxxxxxx";
    original.tradeDate = 4;
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    Report decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(OrderRejectTest, EncodeAndDeocde) {
    OrderReject original;
    original.bizId = 4;
    original.bizPbu = "xxxxxxxx";
    original.clOrdId = "xxxxxxxxxx";
    original.securityId = "xxxxxxxxxxxx";
    original.ordRejReason = 4;
    original.tradeDate = 4;
    original.transactTime = 8;
    original.userInfo = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ByteBuf buf;
    original.encode(buf);
    OrderReject decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(PlatformStateTest, EncodeAndDeocde) {
    PlatformState original;
    original.platformId = 2;
    original.platformState = 2;
    
    ByteBuf buf;
    original.encode(buf);
    PlatformState decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExecRptInfoTest, EncodeAndDeocde) {
    ExecRptInfo original;
    original.platformId = 2;
    original.pbu = {"xxxxxxxx"};
    original.setId = {4};
    
    ByteBuf buf;
    original.encode(buf);
    ExecRptInfo decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExecRptSyncTest, EncodeAndDeocde) {
    SubExecRptSync subExecRptSync;
    subExecRptSync.pbu = "xxxxxxxx";
    subExecRptSync.setId = 4;
    subExecRptSync.beginReportIndex = 8;
    
    ExecRptSync original;
    original.subExecRptSync = {subExecRptSync};
    
    ByteBuf buf;
    original.encode(buf);
    ExecRptSync decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExecRptSyncRspTest, EncodeAndDeocde) {
    SubExecRptSyncRsp subExecRptSyncRsp;
    subExecRptSyncRsp.pbu = "xxxxxxxx";
    subExecRptSyncRsp.setId = 4;
    subExecRptSyncRsp.beginReportIndex = 8;
    subExecRptSyncRsp.endReportIndex = 8;
    subExecRptSyncRsp.rejReason = 4;
    subExecRptSyncRsp.text = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    
    ExecRptSyncRsp original;
    original.subExecRptSyncRsp = {subExecRptSyncRsp};
    
    ByteBuf buf;
    original.encode(buf);
    ExecRptSyncRsp decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

TEST(ExecRptEndOfStreamTest, EncodeAndDeocde) {
    ExecRptEndOfStream original;
    original.pbu = "xxxxxxxx";
    original.setId = 4;
    original.endReportIndex = 8;
    
    ByteBuf buf;
    original.encode(buf);
    ExecRptEndOfStream decoded;
    decoded.decode(buf);

    EXPECT_TRUE(original == decoded);
}

